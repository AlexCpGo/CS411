Hello everyone. >> Today's lecture will cover three important topics covered. That's the mini lectures. The first mini lecture whenever data models, like the second one, will cover relational data models from the practical perspective. And the third lecture, structured query language basics. >> Okay, let's get words. >> What does the data model? >> A data model is simply an abstract way, abstract representation that organizes elements of data and standardizes how they relate to one another. >> So remember that in my previous definition of a database, I say the database is a list of items, right? Set of items basically. So a data models basically is going to simply regulate how these data items relate to each other. And each data model has three very important components. One, the structure of the data, which is the basic data structure that constitutes this model. >> Right? >> Second is going to be operations on the data. So the data model will define how we interact with the data, how we insert, how we delete data items, how we update items. And the third and most important thing that the data model provides is constraints on the data. So ways to describe limitations on what things I can do on the data items and what things I cannot do. >> So these constraints will come from where? Of course they will come from, a real world requirements. >> Okay. >> Any questions so far? >> So three things. Keep in mind three things. >> The structure of the data, the operations on the data, and constraints on the data. Here are a few very, very old models. >> The hierarchical model is the model that connects the data items or records as a tree structure. >> This model did not survive for long. >> This come actually before the famous database relational database model, because it does not differentiate between the physical way of representing the data and how we interact the data. >> So programmers have to write a lot of codes to maintain their database and guess what? >> Once they want to make any simple change on their database, they have to make a lot of changes in their code because they're highly interconnected. So that was problematic. >> The network model is more of a graph, so it doesn't have this hierarchical tree structure, but again, it connects different data items. And one record can have multiple parents, right? >> And can be connected to different parents. Again, the same problem. That model did not provide us with a way of separating operations on the data and the code that interacts with the data. >> And finally, something that you've probably heard of by now, some people haven't, is the semi-structured model like XML, where we structure things in tabs. >> And we can have a tree structure or different kinds of structures to represent our data. >> This back in the days was like people thought about it as one way of actually replacing relational database. >> And this come to exist with the evolution of the Web, right? >> People thought that some existing database models are not going to be able to cope up with the web development. So they start to develop ways of communicating data across websites. >> And they start to think, Oh, maybe we can actually create a new way of storing data. >> So they come up with XML and guess what? They have even query language like XQuery XPath to query data from XML files. Now we're going to study one of the most famous Back in the days or most stable. Let me be very concise data model, which is the relational model. The relational model started with this paper that is titled a relational model of data for large share data banks. Wants to thing here, the word relational basically exists, but the world database does not exist. So it doesn't even say a database back then. So this paper kind of introduced a mathematical model that is completely separate from the way the previous models, like the hierarchical and network model dealt with data. >> So the main goal of this great guy Edward code was to separate physical implementation from logical, like the way the data is actually stored. >> Desk is completely separate from the way we view it. >> An example of that, all of us when we talk about relational databases, we think about relations or tables. >> So we see tables, we see columns, and that's how we perceive a database. >> The fact is that's not how the data is stored on disk. The data stored on disk on files. >> Data files. >> And there is data files, there's index file. So the way the data is stored and managed on this is completely different. >> But the powerful thing is that there is this obstruction where I can just treat the data as tables. And I have a set of well-defined mathematical operations that I can have on this data. >> So that I can, I don't have to worry about how the data is stored. >> Now I want to connect the dots, right? >> We said that every data model has three things. >> Structure, right? >> Operations and constraints. >> So the structure, the main data structure for this model is called a relation, right? >> A relation is simply describes an association between a data item. >> Data items like how data items are actually connected. >> And it's just nothing but to pose with attributes like key-value activists if you want to think about them. So as I mentioned, abstractly, we think about them as rows and tables. But the fact is this is actually imprecise of how they're actually stored. >> And modern Edward actually come up with a set of standard mathematical logical operations. We're going to study those deeply when we talk about, when we talk about relational algebra, so that we understand the set of operations like the projection, that is selection, there is update, delete. It's a set of operations that were defined on this structure. >> So the structure is the relation, which is a set of associations between attributes and values, right? >> And then you have a set of operations, and then you have a set of constraints that you can define. And this data model, that's what made the relational data model, is a model because it has these three very important components.
